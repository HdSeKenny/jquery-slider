.slider {
  position: relative;
}

.slider-viewport {
  position: relative;
  overflow: hidden;
}

.slider-track {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  -webkit-box-pack: start;
      -ms-flex-pack: start;
          justify-content: flex-start;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.slider.no-slide .slider-track {
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.slide {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-flex: 0;
      -ms-flex-positive: 0;
          flex-grow: 0;
  -ms-flex-negative: 0;
      flex-shrink: 0;
  overflow: hidden;
  max-width: 100%;
  -ms-flex-preferred-size: auto;
      flex-basis: auto;
  height: 200px;
  background: transparent;
  color: #ffffff;
}

.slide + .slide {
  margin-left: 0;
}

.slide[data-slide-background] {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center;
}

.slide-overlay {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
}

.slide-full-width,
.slide-cover-width {
  -ms-flex-preferred-size: 100%;
      flex-basis: 100%;
}

.slider-full-width .slide,
.slider-cover-width .slide {
  -ms-flex-preferred-size: 100%;
      flex-basis: 100%;
}

.slide-image {
  display: block;
  position: relative;
  overflow: hidden;
  -webkit-transition: -webkit-transform 300ms;
  transition: -webkit-transform 300ms;
  transition: transform 300ms;
  transition: transform 300ms, -webkit-transform 300ms;
  text-align: center;
}

.slide-image-zoom {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  z-index: 10;
  width: 0;
  overflow: hidden;
  color: rgba(255, 255, 255, 0.8);
  font-size: 30px;
  background: rgba(0, 0, 0, 0.3);
  -webkit-transition: opacity 400ms, width 0ms linear 400ms;
  transition: opacity 400ms, width 0ms linear 400ms;
  opacity: 0;
}

.slide-image img {
  vertical-align: middle;
  border: none;
  max-height: 200px;
}

.slide-image:hover {
  -webkit-transform: scale(1.1);
          transform: scale(1.1);
}

.slide-image:hover .slide-image-zoom {
  -webkit-transition: opacity 400ms, width 0ms linear 0ms;
  transition: opacity 400ms, width 0ms linear 0ms;
  width: 100%;
  opacity: 1;
}

.slide-cover-width .slide-image {
  width: 100%;
}

.slide-cover-wrapper {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center;
}

.slide-cover-wrapper img.slide-cover {
  opacity: 0;
}

.slider-cover-width .slide-image {
  width: 100%;
}

.slider-prev,
.slider-next {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  position: absolute;
  top: 0;
  bottom: 0;
  z-index: 100;
  width: 30px;
  background: rgba(0, 0, 0, 0.3);
  font-size: 30px;
  color: #ffffff;
  text-decoration: none;
  -webkit-transition: width 300ms ease 400ms, background 300ms, color 300ms;
  transition: width 300ms ease 400ms, background 300ms, color 300ms;
  overflow: hidden;
}

.slider-prev:hover,
.slider-next:hover {
  background: rgba(0, 0, 0, 0.6);
  color: #ffdd8a;
  text-decoration: none;
}

.slider-prev {
  left: 0;
}

.slider-next {
  right: 0;
}

.slider-start .slider-prev {
  background: rgba(0, 0, 0, 0.3);
  color: #7e7e7e;
  width: 0;
}

.slider-end .slider-next {
  background: rgba(0, 0, 0, 0.3);
  color: #7e7e7e;
  width: 0;
}

.slider.no-slide .slider-prev,
.slider.no-slide .slider-next {
  display: none;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */
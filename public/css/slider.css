.slider {
  position: relative;
}

.slider-viewport {
  position: relative;
  overflow: hidden;
}

.slider-track {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  -webkit-box-pack: start;
      -ms-flex-pack: start;
          justify-content: flex-start;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.slider.no-slide .slider-track {
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
}

.slide {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  -webkit-box-flex: 0;
      -ms-flex-positive: 0;
          flex-grow: 0;
  -ms-flex-negative: 0;
      flex-shrink: 0;
  overflow: hidden;
  max-width: 100%;
  -ms-flex-preferred-size: auto;
      flex-basis: auto;
  height: auto;
  background: transparent;
  color: #ffffff;
  -webkit-transform: translateZ(0);
          transform: translateZ(0);
}

.slide + .slide {
  margin-left: 0;
}

.slide-overlay {
  position: relative;
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.5);
}

.slide-full-width,
.slide-cover-width {
  -ms-flex-preferred-size: 100%;
      flex-basis: 100%;
}

.slider-full-width .slide,
.slider-cover-width .slide {
  -ms-flex-preferred-size: 100%;
      flex-basis: 100%;
}

.slide-data-background {
  display: block;
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: -1;
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center;
  -webkit-transition: -webkit-transform 300ms;
  transition: -webkit-transform 300ms;
  transition: transform 300ms;
  transition: transform 300ms, -webkit-transform 300ms;
}

.slide:hover .slide-data-zoom-background {
  -webkit-transform: scale(1.1);
          transform: scale(1.1);
}

.slide[data-background],
.slide[data-zoom-background] {
  background: transparent;
}

.slide {
  margin-left: -1px;
  margin-right: -1px;
}

.slide-image {
  display: block;
  position: relative;
  text-align: center;
  -webkit-transition: -webkit-transform 300ms;
  transition: -webkit-transform 300ms;
  transition: transform 300ms;
  transition: transform 300ms, -webkit-transform 300ms;
}

.slide-image:hover {
  -webkit-transform: scale(1.1);
          transform: scale(1.1);
}

.slide-image-caption {
  display: block;
  position: absolute;
  left: 0;
  right: 0;
  bottom: 0;
  z-index: 1;
  padding: 0.8em;
  text-decoration: none;
  font-size: 14px;
  color: #ffffff;
  background: rgba(0, 0, 0, 0.4);
  -webkit-transition: -webkit-transform 300ms;
  transition: -webkit-transform 300ms;
  transition: transform 300ms;
  transition: transform 300ms, -webkit-transform 300ms;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.slide-image:hover .slide-image-caption {
  -webkit-transform: translateY(100%);
          transform: translateY(100%);
}

.slide-image-hoverlay {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  position: absolute;
  top: 0;
  left: 0;
  bottom: 0;
  z-index: 10;
  width: 0;
  overflow: hidden;
  color: rgba(255, 255, 255, 0.8);
  font-size: 30px;
  background: rgba(0, 0, 0, 0.3);
  -webkit-transition: opacity 400ms, width 0ms linear 400ms;
  transition: opacity 400ms, width 0ms linear 400ms;
  opacity: 0;
  -webkit-transform: translateZ(0);
          transform: translateZ(0);
}

.slide-image:hover .slide-image-hoverlay {
  -webkit-transition: opacity 400ms, width 0ms linear 0ms;
  transition: opacity 400ms, width 0ms linear 0ms;
  width: 100%;
  opacity: 1;
}

.slide-image img {
  vertical-align: middle;
  border: none;
  max-height: auto;
}

.slide-image-background-wrapper {
  background-size: cover;
  background-repeat: no-repeat;
  background-position: center center;
}

.slide-image-background-wrapper .slide-image-background {
  opacity: 0;
}

.slide-cover-width .slide-image {
  width: 100%;
}

.slider-cover-width .slide-image {
  width: 100%;
}

.slider-prev,
.slider-next {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
      -ms-flex-pack: center;
          justify-content: center;
  -webkit-box-align: center;
      -ms-flex-align: center;
          align-items: center;
  position: absolute;
  top: 0;
  bottom: 0;
  z-index: 100;
  width: 30px;
  background: rgba(0, 0, 0, 0.3);
  font-size: 30px;
  color: #ffffff;
  text-decoration: none;
  -webkit-transition: width 300ms ease 400ms, background 300ms, color 300ms;
  transition: width 300ms ease 400ms, background 300ms, color 300ms;
  overflow: hidden;
}

.slider-prev:hover,
.slider-next:hover {
  background: rgba(0, 0, 0, 0.6);
  color: #ffdd8a;
  text-decoration: none;
}

.slider-prev {
  left: 0;
}

.slider-next {
  right: 0;
}

.slider-start .slider-prev {
  background: rgba(0, 0, 0, 0.3);
  color: #7e7e7e;
  width: 0;
}

.slider-end .slider-next {
  background: rgba(0, 0, 0, 0.3);
  color: #7e7e7e;
  width: 0;
}

.slider.no-slide .slider-prev,
.slider.no-slide .slider-next {
  display: none;
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */